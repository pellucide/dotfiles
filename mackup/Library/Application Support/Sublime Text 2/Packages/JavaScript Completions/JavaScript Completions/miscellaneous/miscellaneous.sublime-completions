{
  "scope": "source.js",

  "completions":
  [
    "var ",
    "let ",
    "const ",
    "null",
    "undefined",
    "NaN",
    "Infinity",
    "true",
    "false",
    "continue;",
    "break;",
    "return",
    "'use strict';",
    "new Boolean()",
    "new Image()",
    "new Option()",
    "new FormData(${0:form})",

    "function ${0:function_name} (argument){\n\t/* body... */\n}",
    "(function(){\n\t$0\n})();",

    { "trigger": "prototype", "contents": "${0:class_name}.prototype.method_name = function(argument){\n\t/* body... */\n};"},
    { "trigger": "for()", "contents": "for(var i = 0, length1 = ${0:array}.length; i < length1; i++){\n\t${0:array}[i]\n}" },
    { "trigger": "for-j", "contents": "for(var j = 0, length2 = ${0:array}.length; j < length2; j++){\n\t${0:array}[j]\n}" },
    { "trigger": "for-k", "contents": "for(var k = 0, length3 = ${0:array}.length; k < length3; k++){\n\t${0:array}[k]\n}" },
    { "trigger": "for in", "contents": "for(${0:variable} in object){\n\tstatements\n}" },
    { "trigger": "for of", "contents": "for(${0:variable} of object){\n\tstatements\n}" },
    { "trigger": "forEach", "contents": "${0:array}.forEach(function(element, index){\n\tstatements\n});" },
    { "trigger": "while()", "contents": "while(${0:condition}){\n\tstatement\n}" },
    { "trigger": "do while()", "contents": "do{\n\tstatement\n}while(${0:condition});" },
    { "trigger": "if()", "contents": "if(${0:condition}){\n\t\n}" },
    { "trigger": "if else", "contents": "if(${0:condition}){\n\t\n}else{\n\t\n}" },
    { "trigger": "else if()", "contents": "else if(${0:condition}){\n\t\n}" },
    { "trigger": "else", "contents": "else{\n\t$0\n}" },
    { "trigger": "Conditional operator", "contents": "(${0:condition}) ? val1 : val2;" },
    { "trigger": "switch()", "contents": "switch(${0:expression}){\n\tcase label_1:\n\t\tstatements_1\n\t\tbreak;\n\tdefault:\n\t\tstatements_def\n\t\tbreak;\n}"},
    { "trigger": "try catch", "contents": "try{\n\t${0:statements}\n}catch(e){\n\tstatements\n\tconsole.log(e);\n}"},
    { "trigger": "try catch finally", "contents": "try{\n\t${0:statements}\n}catch(e){\n\tstatements\n\tconsole.log(e);\n}finally{\n\tstatements\n}"},

    "\\u0009",
    "\\u000B",
    "\\u000C",
    "\\u0020",
    "\\u000A",
    "\\u000D",
    "\\u0008",
    "\\u0022",
    "\\u0027",
    "\\u005C",

    { "trigger": "Logical AND (&&)", "contents": "${0:expr1} && expr2" },
    { "trigger": "Logical OR (||)", "contents": "${0:expr1} || expr2" },
    { "trigger": "Logical NOT (!)", "contents": "!${0:expr}" },
    { "trigger": "Equal (==)", "contents": "${0:expr1} == expr2" },
    { "trigger": "Not equal (!=)", "contents": "${0:expr1} != expr2" },
    { "trigger": "Strict equal (===)", "contents": "${0:expr1} === expr2" },
    { "trigger": "Strict not equal (!==)", "contents": "${0:expr1} !=== expr2" },
    { "trigger": "Greater than (>)", "contents": "${0:expr1} > expr2" },
    { "trigger": "Greater than or equal (>=)", "contents": "${0:expr1} >= expr2" },
    { "trigger": "Less than (<)", "contents": "${0:expr1} < expr2" },
    { "trigger": "Less than or equal (<=)", "contents": "${0:expr1} <= expr2" },
    { "trigger": "Modulus (%)", "contents": "${0:expr1} % expr2" },
    { "trigger": "PostIncrement (expr++)", "contents": "${0:expr}++" },
    { "trigger": "PostDecrement (expr--)", "contents": "${0:expr}--" },
    { "trigger": "PreIncrement (++expr)", "contents": "++${0:expr}" },
    { "trigger": "PreDecrement (--expr)", "contents": "--${0:expr}" },
    { "trigger": "Unary negation (-)", "contents": "-${0:expr}" },
    { "trigger": "Bitwise AND (&)", "contents": "${0:expr1} & expr2" },
    { "trigger": "Bitwise OR (|)", "contents": "${0:expr1} | expr2" },
    { "trigger": "Bitwise XOR (^)", "contents": "${0:expr1} ^ expr2" },
    { "trigger": "Bitwise NOT (~)", "contents": "${0:expr1} ~ expr2" },
    { "trigger": "Left shift (<<)", "contents": "${0:expr1} << expr2" },
    { "trigger": "Sign-propagating right shift (>>)", "contents": "${0:expr1} >> expr2" },
    { "trigger": "Zero-fill right shift (>>>)", "contents": "${0:expr1} >>> expr2" },

    "console.log('$0');",
    "void('$0')",
    "throw $0;"
  ]
}
