{
  "scope": "source.js",

  "completions":
  [
    {
			"trigger": "description-Worker",
			"contents": "/*\n\tDescription:\n\tThe Worker() constructor creates a Worker that executes the script at the specified URL. This script must obey the same-origin policy.\n\n\tSyntax:\n\twebWorker = new Worker(aURL);\n*/"
		},
		{
			"trigger": "description-Worker.onmessage",
			"contents": "/*\n\tDescription:\n\tThe Worker.onmessage property represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker calls its own postMessage() method: it is the way that a Worker has to give back information to the thread that created it.\n\n\tSyntax:\n\tworker.onmessage = eventHandler\n*/"
		},
		{
			"trigger": "description-Worker.onerror",
			"contents": "/*\n\tDescription:\n\tThe AbstractWorker.onerror property represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker.\n\n\tSyntax:\n\tworker.onerror = eventHandler\n*/"
		},
		{
			"trigger": "description-Worker.postMessage()",
			"contents": "/*\n\tDescription:\n\tThe Worker.postMessage() method sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.\n\n\tSyntax:\n\tworker.postMessage(aMessage, transferList);\n*/"
		},
		{
			"trigger": "description-Worker.terminate()",
			"contents": "/*\n\tDescription:\n\tThe Worker.terminate() method immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.\n\n\tSyntax:\n\tworker.terminate();\n*/"
		},
  ]
}