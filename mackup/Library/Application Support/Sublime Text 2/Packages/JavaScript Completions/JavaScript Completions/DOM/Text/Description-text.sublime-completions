{
  "scope": "source.js",

  "completions":
  [
    {
			"trigger": "description-Text()",
			"contents": "/*\n\tDescription:\n\tThe Text() constructor returns a newly created Text object with the optional DOMString given in parameter as its textual content.\n\n\tSyntax:\n\ttext1 = new Text(); // Create an empty text node\n\ttext2 = new Text(\"This is a text node\");\n*/"
		},
		{
			"trigger": "description-Text.wholeText",
			"contents": "/*\n\tDescription:\n\tThe Text.wholeText read-only property returns all text of all Text nodes logically adjacent to the node. The text is concatenated in document order.Â  This allows to specify any text node and obtain all adjacent text as a single string.\n\n\tSyntax:\n\tstr = textnode.wholeText;\n*/"
		},
		{
			"trigger": "description-Text.splitText()",
			"contents": "/*\n\tDescription:\n\tThe Text.splitText() method breaks the Textnode into two nodes at the specified offset, keeping both nodes in the tree as siblings. After the split, the current node contains all the content up to the specified offset point, and a newly created node of the same type contains the remaining text.  The newly created node is returned to the caller.  If the original node had a parent, the new node is inserted as the next sibling of the original node.  If the offset is equal to the length of the original node, the newly created node has no data.\n\n\tSyntax:\n\treplacementNode = textnode.splitText(offset)\n*/"
		},
  ]
}